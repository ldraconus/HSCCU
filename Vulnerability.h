#ifndef VULNERABILITY_H
#define VULNERABILITY_H

#include "complication.h"
#include "fraction.h"

class Vulnerability: public Complication
{
public:
    Vulnerability(): Complication() { }
    Vulnerability(const Vulnerability& ac)
        : Complication()
        , v(ac.v) { }
    Vulnerability(Vulnerability&& ac)
        : Complication()
        , v(ac.v) { }
    Vulnerability(const QJsonObject& json)
        : Complication()
        , v { json["attack"].toInt(0), json["where"].toInt(0), json["what"].toString("") } { }

    Vulnerability& operator=(const Vulnerability& ac) {
        if (this != &ac) v = ac.v;
        return *this;
    }
    Vulnerability& operator=(Vulnerability&& ac) {
        v = ac.v;
        return *this;
    }

    QString description() override {
        static QList<QString> attk { "Uncommon", "Common", "Very Common" };
        static QStringList where { Fraction(1, 1, 2).toString() + "xBODY", Fraction(1, 1, 2).toString() + "xSTUN",
                                   Fraction(1, 1, 2).toString() + "xEffect", "2xBODY", "2xSTUN", "2xEffect" };
        if (v._attack < 0 || v._where < 0 || v._what.isEmpty()) return "<incomplete>";
        return QString("Vulnerability: %1 (%2, %3)").arg(v._what, attk[v._attack], where[v._where]);
    }
    void form(QWidget* parent, QVBoxLayout* layout) override {
        what   = createLineEdit(parent, layout, "What are you vulnerable to?");
        attack = createComboBox(parent, layout, "How common is the attack", { "Uncommmon", "Common", "Very Common" });
        where  = createComboBox(parent, layout, "Effect?", { Fraction(1, 2).toString() + "xBODY", Fraction(1, 2).toString() + "xSTUN",
                                                             Fraction(1, 2).toString() + "xEffect", "2xBODY", "2xSTUN", "2xEffect" });
    }
    Points points(bool noStore = false) override {
        if (!noStore) store();
        return (v._where > 2 ? 2_cp : 1_cp) * (v._attack + 1) * 5_cp;
    }
    void restore() override {
        vars s = v;
        what->setText(s._what);
        where->setCurrentIndex(s._where);
        attack->setCurrentIndex(s._attack);
        v = s;
    }
    void store() override {
        v._what   = what->text();
        v._where  = where->currentIndex();
        v._attack = attack->currentIndex();
    }
    QJsonObject toJson() override {
        QJsonObject obj;
        obj["name"]   = "Vulnerability";
        obj["attack"] = v._attack;
        obj["where"] = v._where;
        obj["what"]   = v._what;
        return obj;
    }

private:
    struct vars {
        int     _attack = -1;
        int     _where = -1;
        QString _what = "";
    } v;

    QComboBox* attack;
    QComboBox* where;
    QLineEdit* what;
};

#endif // VULNERABILITY_H
